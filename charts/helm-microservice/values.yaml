name: helm-microservice

replicaCount: 1

updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

image:
  repository: k8s.gcr.io/echoserver
  tag: latest
  pullPolicy: Always

imagePullSecrets:
  enabled: false
  secretName: ""

annotations: {}

service:
  type: ClusterIP
  annotations: {}
  portName: http-internal
  externalPort: 8080
  internalPort: 8080
  additionalPorts:
    enabled: false
    ports: []

ingress:
  enabled: false
  annotations: []
  tls: {}
  hosts: []
  labels: []
  subDomain: ""
  baseDomain: ""
  tlsSecretName:
    enabled: false
  ## This one can be used to insert one templated annotation. Ugly, but I could not find a better way of doing it :(
  hackAnnotations: false

livenessProbe:
  enabled: true
  httpProbePath: /health
  initialDelaySeconds: 30
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 3
  failureThreshold: 3

  # Allows defining own probe for a liveness check. By default HTTP is used with values from service definition`
  override:
    enabled: false
    probe: {}

readinessProbe:
  enabled: true
  httpProbePath: /health
  initialDelaySeconds: 5
  timeoutSeconds: 3
  periodSeconds: 20

  # Allows defining own probe for a readiness check. By default HTTP is used with values from service definition`
  override:
    enabled: false
    probe: {}

startupProbe:
  enabled: false
  override:
    enabled: false
    probe: {}

# Define custom command for the container
command: []

# Define additional arguments to add to the command
args: []

gcpcreds_file:
  create: false
  path: /opt/backup/gce-babelfish-sa.json

gcp_creds_file: ""

env:
  INFO_ENABLED: true
  AUTH_ENABLED: false
  HEALTH_ENABLED: true
  LOGGING_PROD_MODE: true

## envFrom can be used to pass configmaps or secrets as environment
envFrom: []
# envFrom:
#   - configMapRef:
#       name: env-configmap
#   - secretRef:
#       name: env-secrets

resources:
  requests:
    cpu: 100m
    memory: 100Mi
  limits:
    cpu: 400m
    memory: 500Mi

hack:
  # Forces recreation of pod on each deployment. Useful when using `latest` tag.
  # Helm's `--recreate-pods` does the same, but without honoring deployment strategy
  recreatePod: false

# Enable Google'c config connector
useConfigConnector:
  enabled: false
  database:
    dbName: ""
  google:
    region: us-east1-c
    projectId: skael-hydra

minikube:
  enabled: false
  path: "/src"
  hostPath: "/src"

migrations_hook:
  enabled: false
  command: ["migration", "up"]
  args: []
  name: migrations
  env:
    MIGRATION_PATH: "/opt/migration/migrations"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
  image:
    repository: k8s.gcr.io/echoserver
    tag: latest
    pullPolicy: Always
  activeDeadlineSeconds: 600
  ttlSecondsAfterFinished: 120
  restartPolicy: OnFailure
  imagePullSecrets:
    enabled: false

pg_dump_hook:
  enabled: false
  name: pg-dump
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
  image:
    repository: gcr.io/skael-hydra/devops/pg-dump
    tag: latest
    pullPolicy: Always
  activeDeadlineSeconds: 600
  ttlSecondsAfterFinished: 120
  restartPolicy: OnFailure

pg_restore_hook:
  enabled: false
  name: pg-restore
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
  image:
    repository: gcr.io/skael-hydra/devops/pg-dump
    tag: latest
    pullPolicy: Always
  activeDeadlineSeconds: 1200
  ttlSecondsAfterFinished: 120
  restartPolicy: OnFailure

serviceAccount:
  create: false
  useExisting:
    enabled: false

tolerations: []
    # - key: "key"
    #   operator: "Equal|Exists"
    #   value: "value"
    #   effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"

pg_restore_allowed:
  enabled: false

# Persistence allows creating and mounting arbitrary amount of PVC.
# For volumes with `existingClaimName` specified no PVC is created - esiting one will be used.
persistence:
  enabled: false
  volumes: []
#    - name: raw-existing
#      accessMode: ReadOnlyMany
#      size: 1Gi
#      storageClass: standard-rwx
#      mountPath: "/data/raw"
#      readOnly: false
#      existingClaimName: "existingRaw"
#    - name: raw
#      accessMode: ReadOnlyMany
#      size: 1Gi
#      storageClass: standard-rwx
#      mountPath: "/data/raw"
#      readOnly: false
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 2
  targetCPU: 70
  targetMemory: 70 

nodeSelector: {}
